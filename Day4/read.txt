我的博客：http://blog.csdn.net/miniykyk/article/details/50658961


脚本：calculator.py


代码分析：
    本脚本由3个函数构成，分别是：
    expression_to_list(expression)， transform_suffix(expression) 和 calculator(expression)

    expression_to_list(expression)：
        输入一个算式字符串，返回由运算符和操作数按顺序构成的列表sequence，这个函数的作用是将表达式拆成一个一个元数据，
        具体算法见代码，要将数字合为一个元自负，将负号与减号区分开来。目前还不能判别"-(7)"这样类型的负号。
        例如：若expression = '(-6.09+7)*-3.2'
             返回：['(', '-6.09', '+', '7', ')', '*', '-3.2']

    transform_suffix(expression)：
        将expression转化为后缀表达式，返回设为suffix。
        例子：a + b * c + ( d * e + f ) * g  转换成 a b c * + d e * f + g * +
        具体算法是：
            令sequence=expression_to_list(expression)
            准备一个堆栈，存储符号
            然后逐个读取sequence中的元数据
            假设+,-优先级最低，*,/优先级稍高，(,) 优先级最高。
            1、若读入的是操作数，插入suffix尾巴上；
            2、若读入的是')', 那么就将栈元素弹出并插到suffix尾巴上，直到遇到'('，但是这个左括号只弹出不插入到suffix中；
            3、若读入的是其他符号，则比较堆栈顶部符号的优先级，若堆栈顶部优先级大于等于该符号的优先级，
            则把顶部符号弹出并插入suffix的尾巴上（但是当遇到'('时，必须停止，不能处理'('），最后将本次读到的符号压入堆栈，遇到左圆括号也压入栈中；
            4、若读到末尾，则将栈元素弹出直到该栈变成空栈，弹出的元素一次插入suffix的末尾。

    calculator（expression）：
        首先将expression转化为后缀表达式：suffix = transform_suffix(expression)
        然后计算该后缀表达式即可，算法见代码，比较简单。


测试用例：
    请输入算式:-5
    我的计算器的计算结果:
    -5.0
    eval的计算结果:
    -5

    请输入算式:3--5
    我的计算器的计算结果:
    8.0
    eval的计算结果:
    8

    请输入算式:(1+2)
    我的计算器的计算结果:
    3.0
    eval的计算结果:
    3

    请输入算式:(((5)))
    我的计算器的计算结果:
    5.0
    eval的计算结果:
    5

    请输入算式:((((9*7)+9)))
    我的计算器的计算结果:
    72.0
    eval的计算结果:
    72

    请输入算式:17+(150.5-(14.5 - -.9)* (5- (6*7.7+4*-7.7)))*-98
    我的计算器的计算结果:
    -30427.680000000004
    eval的计算结果:
    -30427.680000000004

    请输入算式:1 - 2 * ( (60-30 +(-40.0/5) * (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 )) - (-4*3)/ (16-3*2) )
    我的计算器的计算结果:
    2776672.6952380957
    eval的计算结果:
    2776672.6952380957

    请输入算式:1 - 2 * ( (60-30 +(-40.0/5) * (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 )) - (-4*3)/ (16-3*2) ) + 1+2+3+((1+3+5)+(2+4+6)+(8+9+10)-(10-9-8)-(2+4+(1--9+9)*(10+-1)/(-1+12--2)))*12/3*-1/-2--1-3-2-1
    我的计算器的计算结果:
    2776745.387545788
    eval的计算结果:
    2776745.387545788

    请输入算式:1 - 2 * ( (60-30 +(-40.0/5) * (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 + ((5+6000000)*10/(-1 - 2 * ( (60-30 +(-40.0/5) * (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 )) - (-4*3)/ (16-3*2) ) ) *1+2+3+((1+3+5)+(2+4+6)+(8+9+10)-(10-9-8)-(2+4+(1--9+9)*(10+-1)/(-1+12--2)))*12/3*-1/-2--1-3-2-1) )) - (-4*3)/ (16-3*2) )
    我的计算器的计算结果:
    2778165.5102429865
    eval的计算结果:
    2778165.5102429865

